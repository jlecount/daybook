#!/usr/bin/env python
import os
import sys
import yaml
from daybook import Daybook
from daybook.command_processor import CommandProcessor

DAYBOOK_CFG = os.path.join(os.getenv("HOME"), ".daybook.yml")

PYTHON_VERSION_ERROR = "Must be using Python 3.6+"

if sys.version_info[0] < 3:
    raise Exception(PYTHON_VERSION_ERROR)
else:
    if sys.version_info[1] < 6:
        raise Exception(PYTHON_VERSION_ERROR)


def _get_daybook_config(self):
    if os.path.exists(DAYBOOK_CFG):
        with open(DAYBOOK_CFG) as fp:
            return yaml.safe_load(fp.readlines())
    else:
        return {}

def get_project_config():
    cp = CommandProcessor()
    project_name, command, args = cp.parse_args()
    print("Command: " + command)
    print("project_name: {}".format(project_name))
    sub_args = [a for a in dir(args) if not a.startswith("_")]
    sub_arg_values = {s: getattr(args,s) for s in sub_args}
    print("Args: {}".format(sub_arg_values))
    sys.exit(0)

    daybook_cfg = self._get_daybook_config()

    project_name = args.name
    project_dir = args.base_directory

    if not project_name:
        raise Exception("You must pass in a project name")

    if not project_dir:
        pre_existing_project_names = [c.get('name') for c in daybook_cfg]
        if project_name in pre_existing_project_names:
            base_projects = [c.get('directory') for c in daybook_cfg if c['name'] == project_name]
            if not base_projects:
                print("No such project found: {}".format(project_name))
                sys.exit(2)
            else:
                project = base_projects[1]
        else:
            raise Exception("You must pass in a base_directory argument")

    return (project_name, project_dir)


#
# MAIN
#

project_name, project_dir = get_project_config()
db = Daybook(project_name, project_dir)

#
# Use argh -- https://argh.readthedocs.io/en/latest/
#

#project_name arg is mandatory

# subcommands

# create-project
#   "project_dir" arg, mandatory
#   creates new project, adds to ~/.daybook.yml

# list-entries
#   'max_entries' arg, optional
#   'tags' arg, optional
#   'text' arg, optional
#   'after_date' arg, optional
#   'before_date' arg, optional

# list-tags

# create-entry
#     all text is implicitly a body
#     --tags  "a,b,c" are tags
#
